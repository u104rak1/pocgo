definitions:
  accounts.CreateAccountRequestBody:
    properties:
      currency:
        description: 通貨（JPY または USD）
        example: JPY
        type: string
      name:
        description: 3 ～ 20 文字のアカウント名
        example: For work
        type: string
      password:
        description: 4 桁のパスワード
        example: "1234"
        type: string
    type: object
  accounts.CreateAccountResponse:
    properties:
      balance:
        description: 口座残高
        example: 0
        type: number
      currency:
        description: 通貨
        example: JPY
        type: string
      id:
        description: 口座ID
        example: 01J9R7YPV1FH1V0PPKVSB5C7LE
        type: string
      name:
        description: 口座名
        example: For work
        type: string
      updatedAt:
        description: 口座の更新日時
        example: "2021-08-01T00:00:00Z"
        type: string
    type: object
  me.ReadMyProfileResponse:
    properties:
      email:
        description: ユーザーのメールアドレス
        example: sato@example.com
        type: string
      id:
        description: ユーザーのID
        example: 01J9R7YPV1FH1V0PPKVSB5C8FW
        type: string
      name:
        description: ユーザーの名前
        example: Sato Taro
        type: string
    type: object
  response.ProblemDetail:
    properties:
      detail:
        example: Error detail message
        type: string
      instance:
        example: /path/to/resource
        type: string
      status:
        example: 400
        type: integer
      title:
        example: Error title
        type: string
      type:
        example: https://example.com/probs/error-title
        type: string
    type: object
  response.ValidationError:
    properties:
      field:
        example: field name
        type: string
      message:
        example: error message
        type: string
    type: object
  response.ValidationProblemDetail:
    properties:
      detail:
        example: Error detail message
        type: string
      errors:
        items:
          $ref: '#/definitions/response.ValidationError'
        type: array
      instance:
        example: /path/to/resource
        type: string
      status:
        example: 400
        type: integer
      title:
        example: Error title
        type: string
      type:
        example: https://example.com/probs/error-title
        type: string
    type: object
  signin.SigninRequest:
    properties:
      email:
        description: ログイン用メールアドレス
        example: sato@example.com
        type: string
      password:
        description: ログイン用パスワード
        example: password
        type: string
    type: object
  signin.SigninResponse:
    properties:
      accessToken:
        description: アクセストークン
        example: eyJhb...
        type: string
    type: object
  signup.SignupRequest:
    properties:
      email:
        description: ログイン用メールアドレス
        example: sato@example.com
        type: string
      name:
        description: 3 ～ 20 文字のユーザー名
        example: Sato Taro
        type: string
      password:
        description: 8 ～ 20 文字のログイン用パスワード
        example: password
        type: string
    type: object
  signup.SignupResponse:
    properties:
      accessToken:
        description: アクセストークン
        example: eyJhb...
        type: string
      user:
        allOf:
        - $ref: '#/definitions/signup.SignupResponseBodyUser'
        description: ユーザー
    type: object
  signup.SignupResponseBodyUser:
    properties:
      email:
        description: ユーザーのメールアドレス
        example: sato@example.com
        type: string
      id:
        description: ユーザーID
        example: 01J9R7YPV1FH1V0PPKVSB5C8FW
        type: string
      name:
        description: ユーザー名
        example: Sato Taro
        type: string
    type: object
  transactions.ExecuteTransactionRequestBody:
    properties:
      amount:
        description: 取引金額
        example: 1000
        type: number
      currency:
        description: 通貨 （JPY, USD)
        example: JPY
        type: string
      operationType:
        description: 取引種別 （DEPOSIT, WITHDRAWAL, TRANSFER)
        example: DEPOSIT
        type: string
      password:
        description: 口座パスワード
        example: "1234"
        type: string
      receiverAccountId:
        description: 受取口座ID (TRANSFERの場合必須)
        example: 01J9R8AJ1Q2YDH1X9836GS9D87
        type: string
    type: object
  transactions.ExecuteTransactionResponse:
    properties:
      accountId:
        description: 口座ID
        example: 01J9R7YPV1FH1V0PPKVSB5C8FW
        type: string
      amount:
        description: 取引金額
        example: 1000
        type: number
      currency:
        description: 通貨
        example: JPY
        type: string
      id:
        description: 取引ID
        example: 01J9R8AJ1Q2YDH1X9836GS9E89
        type: string
      operationType:
        description: 取引種別
        example: DEPOSIT
        type: string
      receiverAccountId:
        description: 受取口座ID
        example: 01J9R8AJ1Q2YDH1X9836GS9D87
        type: string
      transactionAt:
        description: 取引日時
        example: "2024-03-20T15:00:00Z"
        type: string
    type: object
  transactions.ListTransactionsResponse:
    properties:
      total:
        description: 取引件数
        example: 1
        type: integer
      transactions:
        description: 取引一覧
        items:
          $ref: '#/definitions/transactions.ListTransactionsTransaction'
        type: array
    type: object
  transactions.ListTransactionsTransaction:
    properties:
      accountId:
        description: 口座ID
        example: 01J9R7YPV1FH1V0PPKVSB5C8FW
        type: string
      amount:
        description: 取引金額
        example: 1000
        type: number
      currency:
        description: 通貨
        example: JPY
        type: string
      id:
        description: 取引ID
        example: 01J9R8AJ1Q2YDH1X9836GS9E89
        type: string
      operationType:
        description: 取引種別
        example: DEPOSIT
        type: string
      receiverAccountId:
        description: 受取口座ID
        example: 01J9R8AJ1Q2YDH1X9836GS9D87
        type: string
      transactionAt:
        description: 取引日時
        example: "2024-03-20T15:00:00Z"
        type: string
    type: object
info:
  contact: {}
  description: 'This is a sample server. <br />Please enter your token in the format:
    "Bearer <token>" in the Authorization header.'
  title: pocgo API
  version: "1.0"
paths:
  /api/v1/me:
    get:
      consumes:
      - application/json
      description: 認証済みのユーザーのプロフィールを返します。
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/me.ReadMyProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ProblemDetail'
      security:
      - BearerAuth: []
      summary: プロフィールの取得
      tags:
      - User API
  /api/v1/me/accounts:
    post:
      consumes:
      - application/json
      description: 新しい口座を作成します。
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/accounts.CreateAccountRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/accounts.CreateAccountResponse'
        "400":
          description: Validation Failed or Bad Request
          schema:
            $ref: '#/definitions/response.ValidationProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ProblemDetail'
      security:
      - BearerAuth: []
      summary: 口座の作成
      tags:
      - Account API
  /api/v1/me/accounts/{account_id}/transactions:
    get:
      consumes:
      - application/json
      description: 指定された口座の取引履歴を取得します。
      parameters:
      - description: 操作する口座ID
        in: path
        name: account_id
        required: true
        type: string
      - description: 取引日の開始日（YYYYMMDD）
        in: query
        name: from
        type: string
      - description: 取引日の終了日（YYYYMMDD）
        in: query
        name: to
        type: string
      - description: 取引種別（DEPOSIT, WITHDRAW, TRANSFER カンマ区切りで複数指定可）
        in: query
        name: operationTypes
        type: string
      - description: ソート順（ASC, DESC）
        in: query
        name: sort
        type: string
      - description: ページサイズ（1~100）
        in: query
        name: limit
        type: integer
      - description: ページ番号（1~）
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transactions.ListTransactionsResponse'
        "400":
          description: Validation Failed or Bad Request
          schema:
            $ref: '#/definitions/response.ValidationProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ProblemDetail'
      security:
      - BearerAuth: []
      summary: 取引一覧取得
      tags:
      - Transaction API
    post:
      consumes:
      - application/json
      description: 指定された口座に対して取引を実行します。
      parameters:
      - description: 操作する口座ID
        in: path
        name: account_id
        required: true
        type: string
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transactions.ExecuteTransactionRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transactions.ExecuteTransactionResponse'
        "400":
          description: Validation Failed or Bad Request
          schema:
            $ref: '#/definitions/response.ValidationProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ProblemDetail'
      security:
      - BearerAuth: []
      summary: 取引実行
      tags:
      - Transaction API
  /api/v1/signin:
    post:
      consumes:
      - application/json
      description: ユーザーのメールアドレスとパスワードを使用してユーザーを認証し、アクセストークンを発行します。
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/signin.SigninRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/signin.SigninResponse'
        "400":
          description: Validation Failed or Bad Request
          schema:
            $ref: '#/definitions/response.ValidationProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ProblemDetail'
      summary: サインイン
      tags:
      - Authentication API
  /api/v1/signup:
    post:
      consumes:
      - application/json
      description: 新しいユーザーを作成し、アクセストークンを発行します。
      parameters:
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/signup.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/signup.SignupResponse'
        "400":
          description: Validation Failed or Bad Request
          schema:
            $ref: '#/definitions/response.ValidationProblemDetail'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ProblemDetail'
      summary: サインアップ
      tags:
      - Authentication API
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
