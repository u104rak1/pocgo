// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/verify_email_uniqueness_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVerifyEmailUniquenessService is a mock of IVerifyEmailUniquenessService interface.
type MockIVerifyEmailUniquenessService struct {
	ctrl     *gomock.Controller
	recorder *MockIVerifyEmailUniquenessServiceMockRecorder
}

// MockIVerifyEmailUniquenessServiceMockRecorder is the mock recorder for MockIVerifyEmailUniquenessService.
type MockIVerifyEmailUniquenessServiceMockRecorder struct {
	mock *MockIVerifyEmailUniquenessService
}

// NewMockIVerifyEmailUniquenessService creates a new mock instance.
func NewMockIVerifyEmailUniquenessService(ctrl *gomock.Controller) *MockIVerifyEmailUniquenessService {
	mock := &MockIVerifyEmailUniquenessService{ctrl: ctrl}
	mock.recorder = &MockIVerifyEmailUniquenessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVerifyEmailUniquenessService) EXPECT() *MockIVerifyEmailUniquenessServiceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockIVerifyEmailUniquenessService) Run(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIVerifyEmailUniquenessServiceMockRecorder) Run(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIVerifyEmailUniquenessService)(nil).Run), ctx, email)
}
