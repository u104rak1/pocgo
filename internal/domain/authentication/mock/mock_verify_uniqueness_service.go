// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/authentication/verify_uniqueness_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVerifyAuthenticationUniquenessService is a mock of IVerifyAuthenticationUniquenessService interface.
type MockIVerifyAuthenticationUniquenessService struct {
	ctrl     *gomock.Controller
	recorder *MockIVerifyAuthenticationUniquenessServiceMockRecorder
}

// MockIVerifyAuthenticationUniquenessServiceMockRecorder is the mock recorder for MockIVerifyAuthenticationUniquenessService.
type MockIVerifyAuthenticationUniquenessServiceMockRecorder struct {
	mock *MockIVerifyAuthenticationUniquenessService
}

// NewMockIVerifyAuthenticationUniquenessService creates a new mock instance.
func NewMockIVerifyAuthenticationUniquenessService(ctrl *gomock.Controller) *MockIVerifyAuthenticationUniquenessService {
	mock := &MockIVerifyAuthenticationUniquenessService{ctrl: ctrl}
	mock.recorder = &MockIVerifyAuthenticationUniquenessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVerifyAuthenticationUniquenessService) EXPECT() *MockIVerifyAuthenticationUniquenessServiceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockIVerifyAuthenticationUniquenessService) Run(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIVerifyAuthenticationUniquenessServiceMockRecorder) Run(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIVerifyAuthenticationUniquenessService)(nil).Run), ctx, userID)
}
