// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/account/account_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	account "github.com/u104rak1/pocgo/internal/domain/account"
	user "github.com/u104rak1/pocgo/internal/domain/user"
)

// MockIAccountService is a mock of IAccountService interface.
type MockIAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountServiceMockRecorder
}

// MockIAccountServiceMockRecorder is the mock recorder for MockIAccountService.
type MockIAccountServiceMockRecorder struct {
	mock *MockIAccountService
}

// NewMockIAccountService creates a new mock instance.
func NewMockIAccountService(ctrl *gomock.Controller) *MockIAccountService {
	mock := &MockIAccountService{ctrl: ctrl}
	mock.recorder = &MockIAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountService) EXPECT() *MockIAccountServiceMockRecorder {
	return m.recorder
}

// CheckLimit mocks base method.
func (m *MockIAccountService) CheckLimit(ctx context.Context, userID user.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLimit", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckLimit indicates an expected call of CheckLimit.
func (mr *MockIAccountServiceMockRecorder) CheckLimit(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLimit", reflect.TypeOf((*MockIAccountService)(nil).CheckLimit), ctx, userID)
}

// GetAndAuthorize mocks base method.
func (m *MockIAccountService) GetAndAuthorize(ctx context.Context, accountID account.AccountID, userID *user.UserID, password *string) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndAuthorize", ctx, accountID, userID, password)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndAuthorize indicates an expected call of GetAndAuthorize.
func (mr *MockIAccountServiceMockRecorder) GetAndAuthorize(ctx, accountID, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndAuthorize", reflect.TypeOf((*MockIAccountService)(nil).GetAndAuthorize), ctx, accountID, userID, password)
}
