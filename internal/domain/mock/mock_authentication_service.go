// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/authentication/authentication_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAuthenticationService is a mock of IAuthenticationService interface.
type MockIAuthenticationService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthenticationServiceMockRecorder
}

// MockIAuthenticationServiceMockRecorder is the mock recorder for MockIAuthenticationService.
type MockIAuthenticationServiceMockRecorder struct {
	mock *MockIAuthenticationService
}

// NewMockIAuthenticationService creates a new mock instance.
func NewMockIAuthenticationService(ctrl *gomock.Controller) *MockIAuthenticationService {
	mock := &MockIAuthenticationService{ctrl: ctrl}
	mock.recorder = &MockIAuthenticationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthenticationService) EXPECT() *MockIAuthenticationServiceMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockIAuthenticationService) GenerateAccessToken(ctx context.Context, userID string, jwtSecretKey []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", ctx, userID, jwtSecretKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockIAuthenticationServiceMockRecorder) GenerateAccessToken(ctx, userID, jwtSecretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockIAuthenticationService)(nil).GenerateAccessToken), ctx, userID, jwtSecretKey)
}

// GetUserIDFromAccessToken mocks base method.
func (m *MockIAuthenticationService) GetUserIDFromAccessToken(ctx context.Context, accessToken string, jwtSecretKey []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromAccessToken", ctx, accessToken, jwtSecretKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromAccessToken indicates an expected call of GetUserIDFromAccessToken.
func (mr *MockIAuthenticationServiceMockRecorder) GetUserIDFromAccessToken(ctx, accessToken, jwtSecretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromAccessToken", reflect.TypeOf((*MockIAuthenticationService)(nil).GetUserIDFromAccessToken), ctx, accessToken, jwtSecretKey)
}

// VerifyUniqueness mocks base method.
func (m *MockIAuthenticationService) VerifyUniqueness(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUniqueness", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUniqueness indicates an expected call of VerifyUniqueness.
func (mr *MockIAuthenticationServiceMockRecorder) VerifyUniqueness(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUniqueness", reflect.TypeOf((*MockIAuthenticationService)(nil).VerifyUniqueness), ctx, userID)
}
