// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/authentication/authentication_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	id "github.com/u104rak1/pocgo/internal/domain/value_object/id"
)

// MockIAuthenticationService is a mock of IAuthenticationService interface.
type MockIAuthenticationService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthenticationServiceMockRecorder
}

// MockIAuthenticationServiceMockRecorder is the mock recorder for MockIAuthenticationService.
type MockIAuthenticationServiceMockRecorder struct {
	mock *MockIAuthenticationService
}

// NewMockIAuthenticationService creates a new mock instance.
func NewMockIAuthenticationService(ctrl *gomock.Controller) *MockIAuthenticationService {
	mock := &MockIAuthenticationService{ctrl: ctrl}
	mock.recorder = &MockIAuthenticationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthenticationService) EXPECT() *MockIAuthenticationServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockIAuthenticationService) Authenticate(ctx context.Context, email, password string) (*id.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, email, password)
	ret0, _ := ret[0].(*id.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockIAuthenticationServiceMockRecorder) Authenticate(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockIAuthenticationService)(nil).Authenticate), ctx, email, password)
}

// VerifyUniqueness mocks base method.
func (m *MockIAuthenticationService) VerifyUniqueness(ctx context.Context, userID id.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUniqueness", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUniqueness indicates an expected call of VerifyUniqueness.
func (mr *MockIAuthenticationServiceMockRecorder) VerifyUniqueness(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUniqueness", reflect.TypeOf((*MockIAuthenticationService)(nil).VerifyUniqueness), ctx, userID)
}
