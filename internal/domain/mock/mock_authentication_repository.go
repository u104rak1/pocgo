// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/authentication/authentication_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	authentication "github.com/u104raki/pocgo/internal/domain/authentication"
)

// MockIAuthenticationRepository is a mock of IAuthenticationRepository interface.
type MockIAuthenticationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthenticationRepositoryMockRecorder
}

// MockIAuthenticationRepositoryMockRecorder is the mock recorder for MockIAuthenticationRepository.
type MockIAuthenticationRepositoryMockRecorder struct {
	mock *MockIAuthenticationRepository
}

// NewMockIAuthenticationRepository creates a new mock instance.
func NewMockIAuthenticationRepository(ctrl *gomock.Controller) *MockIAuthenticationRepository {
	mock := &MockIAuthenticationRepository{ctrl: ctrl}
	mock.recorder = &MockIAuthenticationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthenticationRepository) EXPECT() *MockIAuthenticationRepositoryMockRecorder {
	return m.recorder
}

// ExistsByUserID mocks base method.
func (m *MockIAuthenticationRepository) ExistsByUserID(ctx context.Context, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByUserID", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByUserID indicates an expected call of ExistsByUserID.
func (mr *MockIAuthenticationRepositoryMockRecorder) ExistsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByUserID", reflect.TypeOf((*MockIAuthenticationRepository)(nil).ExistsByUserID), ctx, userID)
}

// FindByUserID mocks base method.
func (m *MockIAuthenticationRepository) FindByUserID(ctx context.Context, userID string) (*authentication.Authentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].(*authentication.Authentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockIAuthenticationRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockIAuthenticationRepository)(nil).FindByUserID), ctx, userID)
}

// Save mocks base method.
func (m *MockIAuthenticationRepository) Save(ctx context.Context, authentication *authentication.Authentication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, authentication)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIAuthenticationRepositoryMockRecorder) Save(ctx, authentication interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIAuthenticationRepository)(nil).Save), ctx, authentication)
}
