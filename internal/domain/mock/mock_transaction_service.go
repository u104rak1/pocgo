// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/transaction/transaction_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	account "github.com/u104rak1/pocgo/internal/domain/account"
	transaction "github.com/u104rak1/pocgo/internal/domain/transaction"
)

// MockITransactionService is a mock of ITransactionService interface.
type MockITransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionServiceMockRecorder
}

// MockITransactionServiceMockRecorder is the mock recorder for MockITransactionService.
type MockITransactionServiceMockRecorder struct {
	mock *MockITransactionService
}

// NewMockITransactionService creates a new mock instance.
func NewMockITransactionService(ctrl *gomock.Controller) *MockITransactionService {
	mock := &MockITransactionService{ctrl: ctrl}
	mock.recorder = &MockITransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionService) EXPECT() *MockITransactionServiceMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockITransactionService) Deposit(ctx context.Context, account *account.Account, amount float64, currency string) (*transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, account, amount, currency)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockITransactionServiceMockRecorder) Deposit(ctx, account, amount, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockITransactionService)(nil).Deposit), ctx, account, amount, currency)
}

// ListWithTotal mocks base method.
func (m *MockITransactionService) ListWithTotal(ctx context.Context, params transaction.ListTransactionsParams) ([]*transaction.Transaction, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithTotal", ctx, params)
	ret0, _ := ret[0].([]*transaction.Transaction)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWithTotal indicates an expected call of ListWithTotal.
func (mr *MockITransactionServiceMockRecorder) ListWithTotal(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithTotal", reflect.TypeOf((*MockITransactionService)(nil).ListWithTotal), ctx, params)
}

// Transfer mocks base method.
func (m *MockITransactionService) Transfer(ctx context.Context, senderAccount, receiverAccount *account.Account, amount float64, currency string) (*transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, senderAccount, receiverAccount, amount, currency)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockITransactionServiceMockRecorder) Transfer(ctx, senderAccount, receiverAccount, amount, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockITransactionService)(nil).Transfer), ctx, senderAccount, receiverAccount, amount, currency)
}

// Withdrawal mocks base method.
func (m *MockITransactionService) Withdrawal(ctx context.Context, account *account.Account, amount float64, currency string) (*transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawal", ctx, account, amount, currency)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawal indicates an expected call of Withdrawal.
func (mr *MockITransactionServiceMockRecorder) Withdrawal(ctx, account, amount, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockITransactionService)(nil).Withdrawal), ctx, account, amount, currency)
}
