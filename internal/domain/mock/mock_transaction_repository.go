// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/transaction/transaction_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transaction "github.com/u104rak1/pocgo/internal/domain/transaction"
)

// MockITransactionRepository is a mock of ITransactionRepository interface.
type MockITransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepositoryMockRecorder
}

// MockITransactionRepositoryMockRecorder is the mock recorder for MockITransactionRepository.
type MockITransactionRepositoryMockRecorder struct {
	mock *MockITransactionRepository
}

// NewMockITransactionRepository creates a new mock instance.
func NewMockITransactionRepository(ctrl *gomock.Controller) *MockITransactionRepository {
	mock := &MockITransactionRepository{ctrl: ctrl}
	mock.recorder = &MockITransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionRepository) EXPECT() *MockITransactionRepositoryMockRecorder {
	return m.recorder
}

// ListWithTotalByAccountID mocks base method.
func (m *MockITransactionRepository) ListWithTotalByAccountID(ctx context.Context, params transaction.ListTransactionsParams) ([]*transaction.Transaction, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithTotalByAccountID", ctx, params)
	ret0, _ := ret[0].([]*transaction.Transaction)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWithTotalByAccountID indicates an expected call of ListWithTotalByAccountID.
func (mr *MockITransactionRepositoryMockRecorder) ListWithTotalByAccountID(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithTotalByAccountID", reflect.TypeOf((*MockITransactionRepository)(nil).ListWithTotalByAccountID), ctx, params)
}

// Save mocks base method.
func (m *MockITransactionRepository) Save(ctx context.Context, transaction *transaction.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockITransactionRepositoryMockRecorder) Save(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockITransactionRepository)(nil).Save), ctx, transaction)
}
