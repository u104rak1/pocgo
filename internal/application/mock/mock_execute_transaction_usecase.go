// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/transaction/execute_transaction_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transaction "github.com/ucho456job/pocgo/internal/application/transaction"
)

// MockIExecuteTransactionUsecase is a mock of IExecuteTransactionUsecase interface.
type MockIExecuteTransactionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIExecuteTransactionUsecaseMockRecorder
}

// MockIExecuteTransactionUsecaseMockRecorder is the mock recorder for MockIExecuteTransactionUsecase.
type MockIExecuteTransactionUsecaseMockRecorder struct {
	mock *MockIExecuteTransactionUsecase
}

// NewMockIExecuteTransactionUsecase creates a new mock instance.
func NewMockIExecuteTransactionUsecase(ctrl *gomock.Controller) *MockIExecuteTransactionUsecase {
	mock := &MockIExecuteTransactionUsecase{ctrl: ctrl}
	mock.recorder = &MockIExecuteTransactionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExecuteTransactionUsecase) EXPECT() *MockIExecuteTransactionUsecaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockIExecuteTransactionUsecase) Run(ctx context.Context, cmd transaction.ExecuteTransactionCommand) (*transaction.ListTransactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, cmd)
	ret0, _ := ret[0].(*transaction.ListTransactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockIExecuteTransactionUsecaseMockRecorder) Run(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIExecuteTransactionUsecase)(nil).Run), ctx, cmd)
}
