// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/authentication/signin_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	authentication "github.com/ucho456job/pocgo/internal/application/authentication"
)

// MockISigninUsecase is a mock of ISigninUsecase interface.
type MockISigninUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockISigninUsecaseMockRecorder
}

// MockISigninUsecaseMockRecorder is the mock recorder for MockISigninUsecase.
type MockISigninUsecaseMockRecorder struct {
	mock *MockISigninUsecase
}

// NewMockISigninUsecase creates a new mock instance.
func NewMockISigninUsecase(ctrl *gomock.Controller) *MockISigninUsecase {
	mock := &MockISigninUsecase{ctrl: ctrl}
	mock.recorder = &MockISigninUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISigninUsecase) EXPECT() *MockISigninUsecaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockISigninUsecase) Run(ctx context.Context, cmd authentication.SigninCommand) (*authentication.SigninDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, cmd)
	ret0, _ := ret[0].(*authentication.SigninDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockISigninUsecaseMockRecorder) Run(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockISigninUsecase)(nil).Run), ctx, cmd)
}
