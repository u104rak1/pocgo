// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/authentication/signup_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	authentication "github.com/u104rak1/pocgo/internal/application/authentication"
)

// MockISignupUsecase is a mock of ISignupUsecase interface.
type MockISignupUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockISignupUsecaseMockRecorder
}

// MockISignupUsecaseMockRecorder is the mock recorder for MockISignupUsecase.
type MockISignupUsecaseMockRecorder struct {
	mock *MockISignupUsecase
}

// NewMockISignupUsecase creates a new mock instance.
func NewMockISignupUsecase(ctrl *gomock.Controller) *MockISignupUsecase {
	mock := &MockISignupUsecase{ctrl: ctrl}
	mock.recorder = &MockISignupUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISignupUsecase) EXPECT() *MockISignupUsecaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockISignupUsecase) Run(ctx context.Context, cmd authentication.SignupCommand) (*authentication.SignupDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, cmd)
	ret0, _ := ret[0].(*authentication.SignupDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockISignupUsecaseMockRecorder) Run(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockISignupUsecase)(nil).Run), ctx, cmd)
}
