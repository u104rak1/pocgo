// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/transaction/list_transactions_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transaction "github.com/u104rak1/pocgo/internal/application/transaction"
)

// MockIListTransactionsUsecase is a mock of IListTransactionsUsecase interface.
type MockIListTransactionsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIListTransactionsUsecaseMockRecorder
}

// MockIListTransactionsUsecaseMockRecorder is the mock recorder for MockIListTransactionsUsecase.
type MockIListTransactionsUsecaseMockRecorder struct {
	mock *MockIListTransactionsUsecase
}

// NewMockIListTransactionsUsecase creates a new mock instance.
func NewMockIListTransactionsUsecase(ctrl *gomock.Controller) *MockIListTransactionsUsecase {
	mock := &MockIListTransactionsUsecase{ctrl: ctrl}
	mock.recorder = &MockIListTransactionsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIListTransactionsUsecase) EXPECT() *MockIListTransactionsUsecaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockIListTransactionsUsecase) Run(ctx context.Context, cmd transaction.ListTransactionsCommand) (*transaction.ListTransactionsDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, cmd)
	ret0, _ := ret[0].(*transaction.ListTransactionsDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockIListTransactionsUsecaseMockRecorder) Run(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIListTransactionsUsecase)(nil).Run), ctx, cmd)
}
